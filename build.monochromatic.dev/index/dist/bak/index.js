import path from"path";import fs from"fs";var closestPath=(currentPath=path.resolve(),selectors="package.json",layers=1)=>{if(fs.existsSync(path.join(currentPath,selectors))){if(layers===1){return currentPath}return closestPath(path.join(currentPath,".."),selectors,layers-1)}return closestPath(path.join(currentPath,".."),selectors,layers)};var src_default=closestPath;import fs2 from"fs";import shell from"shelljs";import*as esbuild from"esbuild";import path2 from"path";import{minify}from"terser";import{Extractor,ExtractorConfig}from"@microsoft/api-extractor";var ROOT_DIR=src_default();var INTERMEDIATE_DIR=path2.join(ROOT_DIR,"dist","intermediate");var ensureDirExist=dir=>{fs2.existsSync(path2.join(dir))||fs2.mkdirSync(path2.join(dir),{recursive:true})};var compileTsGenDts=async()=>{ensureDirExist(path2.join(INTERMEDIATE_DIR,"1.  tsc"));const{code:exitCode}=shell.exec("tsc",{fatal:true});if(exitCode){throw Error(`\n1.  tsc\ncompileTsGenDts\nexitCode = ${exitCode}\n`)}console.log(`\n1.  tsc\ncompileTsGenDts\n`)};var bundleJs=async()=>{ensureDirExist(path2.join(INTERMEDIATE_DIR,"1.  esbuild"));const result=await esbuild.build({entryPoints:["src/index.ts"],bundle:true,outdir:"dist/intermediate/1.  esbuild",platform:"node",external:["shelljs","esbuild","terser","@microsoft/api-extractor"],format:"esm",target:"esnext",metafile:true,sourcemap:"external"});if(result.errors.length>0){throw Error(`\n1.  esbuild\nbundleJs\nresult.errors = ${result.errors.toString()}\n`)}fs2.writeFileSync(path2.join(INTERMEDIATE_DIR,"1.  esbuild","meta.json"),JSON.stringify(result.metafile,null,2));console.log(`\n1.  esbuild\nbundleJs\nresult.metafile = ${await esbuild.analyzeMetafile(result.metafile)}\n`)};var bundleDts=async()=>{ensureDirExist(path2.join(INTERMEDIATE_DIR,"2.  api-extractor"));const extractorResult=Extractor.invoke(ExtractorConfig.loadFileAndPrepare(path2.join(ROOT_DIR,"api-extractor.json")),{typescriptCompilerFolder:path2.join(ROOT_DIR,"node_modules","typescript")});if(extractorResult.errorCount>0){throw Error(`\n2.  api-extractor\nbundleDts\nextractorResult.errorCount = ${extractorResult.errorCount}\nextractorResult.warningCount = ${extractorResult.warningCount}\n`)}console.log(`\n2.  api-extractor\nbundleDts\n`)};var minifyJs=async()=>{const{code,map}=await minify({"index.js":fs2.readFileSync(path2.join(INTERMEDIATE_DIR,"1.  esbuild","index.js"),{encoding:"utf8"})},{sourceMap:{filename:"index.js",content:fs2.readFileSync(path2.join(INTERMEDIATE_DIR,"1.  esbuild","index.js.map"),"utf8"),url:"index.js.map"},ecma:2020,compress:false,mangle:false,module:true,format:{indent_level:2,keep_numbers:true,keep_quoted_props:true,quote_style:3},keep_classnames:true,keep_fnames:true});ensureDirExist(path2.join(INTERMEDIATE_DIR,"2.  terser"));fs2.writeFileSync(path2.join(ROOT_DIR,"dist","intermediate","2.  terser","index.js"),code);fs2.writeFileSync(path2.join(ROOT_DIR,"dist","intermediate","2.  terser","index.js.map"),map)};var build1=async()=>{await Promise.all([compileTsGenDts(),bundleJs()])};var build2=async()=>{await Promise.all([bundleDts(),minifyJs()])};var build3=async()=>{await build1();await build2();ensureDirExist(path2.join(ROOT_DIR,"dist","final"));fs2.copyFileSync(path2.join(ROOT_DIR,"dist","intermediate","2.  api-extractor","index.d.ts"),path2.join(ROOT_DIR,"dist","final","index.d.ts"));fs2.copyFileSync(path2.join(ROOT_DIR,"dist","intermediate","2.  terser","index.js"),path2.join(ROOT_DIR,"dist","final","index.js"))};var clean=()=>{fs2.rmSync(path2.join(ROOT_DIR,"dist","final"),{recursive:true,force:true});fs2.rmSync(path2.join(ROOT_DIR,"dist","intermediate"),{recursive:true,force:true});fs2.mkdirSync(path2.join(ROOT_DIR,"dist","final"));fs2.mkdirSync(path2.join(ROOT_DIR,"dist","intermediate"))};var cleanAndBuild=async()=>{clean();await build3()};export{build3 as build,clean,cleanAndBuild};
//# sourceMappingURL=index.js.map